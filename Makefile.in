# Substitutions from configure.
srcdir	= @srcdir@
VPATH	= @srcdir@

AR	= @AR@
CC	= @CC@
INSTALL = @INSTALL@
LD	= @LD@
LEX	= @LEX@
RANLIB	= @RANLIB@
YACC	= @YACC@

CFLAGS	= @CFLAGS@ -Wall @DEFS@ -I$(srcdir) -I.
LDFLAGS	= @LDFLAGS@

# ----------------------------------------------------------------------
#
# Top-level targets
#

all: tcl-extension

clean:
	rm -rf .deps tinysoar.so y.tab.* lex.yy.c *.o *.a core *~

distclean: clean
	rm -f Makefile config.cache config.log config.status defs.h

# ----------------------------------------------------------------------
#
# Dependencies
#

MDDEPDIR=.deps

%.o: %.c $(MDDEPDIR)
	$(CC) -c $(CFLAGS) -Wp,-MD,$(MDDEPDIR)/$*.pp -o $@ $<

all: $(MDDEPDIR)

MDDEPFILES := $(wildcard $(MDDEPDIR)/*.pp)

$(MDDEPDIR):
	mkdir $@

ifdef MDDEPFILES
include $(MDDEPFILES)
endif

# ----------------------------------------------------------------------
#
# Other rules
#

%.a:
	rm -f $@
	$(AR) cr $@ $^
	$(RANLIB) $@

# ----------------------------------------------------------------------
#
# Basic stuff used everywhere.
#

BASE		= base
BASE_LIBNAME	= lib$(BASE).a
BASE_OBJS 	= \
		ht.o \
		debug.o \
		$(NULL)

$(BASE_LIBNAME): $(BASE_OBJS)

# ----------------------------------------------------------------------
#
# Stuff specific to the Soar runtime.
#

RUNTIME		= rt
RUNTIME_LIBNAME	= lib$(RUNTIME).a
RUNTIME_OBJS 	= \
		agent.o \
		rete.o \
		wmem.o \
		$(NULL)

$(RUNTIME_LIBNAME): $(RUNTIME_OBJS)

# ----------------------------------------------------------------------
#
# Stuff for the rule parser
#

PARSER		= parser
PARSER_LIBNAME	= lib$(PARSER).a
PARSER_OBJS	= \
		y.tab.o \
		lex.yy.o \
		prod.o \
		symtab.o \
		$(NULL)

$(PARSER_LIBNAME): $(PARSER_OBJS)

y.tab.c: rule.y
	$(YACC) -d $(srcdir)/rule.y

lex.yy.c: rule.l
	$(LEX) $(srcdir)/rule.l

# ----------------------------------------------------------------------
#
# A TCL extension for testing and development.
#

tcl-extension: tinysoar.so

TINYSOAR_OBJS = \
	export.o \
	$(NULL)

libtinysoar.a: $(TINYSOAR_OBJS)

tinysoar.so: tinysoar.c libtinysoar.a $(PARSER_LIBNAME) $(RUNTIME_LIBNAME) $(BASE_LIBNAME)
	$(CC) $(CFLAGS) -shared -o $@ $< -ltcl -L. -ltinysoar -l$(PARSER) -l$(RUNTIME) -l$(BASE)
	$(INSTALL) $(srcdir)/pkgIndex.tcl .

# ----------------------------------------------------------------------
#
# A Soar agent from the Lego RCX.
#

LEGO_OBJS = \
	lego.o \
	alloc.o \
	$(NULL)

lego: $(LEGO_OBJS) $(RUNTIME_LIBNAME) $(BASE_LIBNAME)
	$(CC) $(LEGO_OBJS) -nostdlib -Wl,-Map -Wl,lego.map -Wl,-T$(srcdir)/h8300.lds -o $@ -L. -l$(RUNTIME) -l$(BASE) -lgcc

LEGO_SIM_OBJS = \
	lego-sim.o \
	alloc.o \
	$(NULL)

lego-sim: $(LEGO_SIM_OBJS) $(RUNTIME_LIBNAME) $(BASE_LIBNAME)
	$(CC) $(LEGO_SIM_OBJS) -o $@ -L. -l$(RUNTIME) -l$(BASE)

test-alloc: test-alloc.c alloc.o debug.o
